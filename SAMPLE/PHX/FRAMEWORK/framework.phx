// -- FUNCTIONS

function GetPath(
    )
{
    static local
        path = null;

    if ( is_null( path ) )
    {
        path = explode( '?', _SERVER[ 'REQUEST_URI' ] )[ 0 ];

        if ( path === '' )
        {
            path = '/';
        }
    }

    return path;
}

// ~~

function GetPathValueArray(
    string path
    )
{
    if ( substr( path, 0, 1 ) === '/' )
    {
        path = substr( path, 1 );
    }

    if ( substr( path, -1 ) === '/' )
    {
        path = substr( path, 0, -1 );
    }

    return explode( '/', path );
}

// ~~

function IsGetRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'GET';
}

// ~~

function IsPostRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'POST';
}

// ~~

function IsPutRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'PUT';
}

// ~~

function IsDeleteRequest(
    )
{
    return _SERVER[ 'REQUEST_METHOD' ] === 'DELETE';
}

// ~~

function HasQueryValue(
    string name
    )
{
    return isset( _GET[ name ] );
}

// ~~

function GetQueryValue(
    string name
    )
{
    return _GET[ name ];
}

// ~~

function HasPostValue(
    string name
    )
{
    return isset( _POST[ name ] );
}

// ~~

function GetPostValue(
    string name
    )
{
    return _POST[ name ];
}

// ~~

function HasSessionValue(
    string name
    )
{
    return isset( _SESSION[ name ] );
}

// ~~

function GetSessionValue(
    string name
    )
{
    return _SESSION[ name ];
}

// ~~

function SetSessionValue(
    name,
    value
    )
{
    _SESSION[ name ] = value;
}

// ~~

function IsSessionValue(
    string name,
    value
    )
{
    return
        isset( _SESSION[ name ] )
        && _SESSION[ name ] === value;
}

// ~~

function FindSessionValue(
    string name,
    default_value
    )
{
    if ( isset( _SESSION[ name ] ) )
    {
        return _SESSION[ name ];
    }
    else
    {
        return default_value;
    }
}

// ~~

function HasCookieValue(
    string name
    )
{
    return isset( _COOKIE[ name ] );
}

// ~~

function GetCookieValue(
    string name
    )
{
    return _COOKIE[ name ];
}

// ~~

function Redirect(
    string path
    )
{
    header( 'Location: ' .. path );
}

// ~~

function IsId(
    value
    )
{
    return
        is_numeric( value )
        && value === ( int ) value
        && value > 0;
}

// ~~

function GetDatabaseConnection(
    )
{
    static local
        connection = null;

    if ( is_null( connection ) )
    {
        connection = new PDO( 'mysql:host=localhost;dbname=BLOG', 'root', '' );
        connection.prepare( "set names 'utf8mb4'" ).execute();
    }

    return connection;
}

// ~~

function GetDatabaseError(
    )
{
    return GetDatabaseConnection().errorInfo();
}

// ~~

function GetDatabaseAddedId(
    )
{
    return GetDatabaseConnection().lastInsertId();
}

// ~~

function GetDatabaseStatement(
    string command
    )
{
    return GetDatabaseConnection().prepare( command );
}

// ~~

function GetDatabaseObject(
    statement
    )
{
    return statement.fetchObject();
}

// ~~

function GetDatabaseObjectArray(
    statement
    )
{
    var object_array = [];

    while ( var object = statement.fetchObject() )
    {
        array_push( object_array, object );
    }

    return object_array;
}

// ~~

function GetBrowserLanguageCode(
    array valid_language_code_array
    )
{
    if ( isset( _SERVER[ 'HTTP_ACCEPT_LANGUAGE' ] ) )
    {
        var browser_language_code_array = explode( ',', str_replace( ';', ',', _SERVER[ 'HTTP_ACCEPT_LANGUAGE' ] ) );

        foreach ( var browser_language_code; browser_language_code_array )
        {
            browser_language_code = strtolower( substr( browser_language_code, 0, 2 ) );

            var valid_language_code_index = array_search( browser_language_code, valid_language_code_array, true );

            if ( valid_language_code_index !== false )
            {
                return valid_language_code_array[ valid_language_code_index ];
            }
        }
    }
    else
    {
        return valid_language_code_array[ 0 ];
    }
}

// ~~

function GetTranslatedText(
    string text,
    int translated_text_index
    )
{
    local
        translated_text;

    var translated_text_array = explode( 'Â¨', text );

    if ( translated_text_index < count( translated_text_array ) )
    {
        translated_text = translated_text_array[ translated_text_index ];
    }
    else
    {
        translated_text = translated_text_array[ 0 ];
    }

    return str_replace( '[<', '<', str_replace( '>]', '>', translated_text ) );
}

// ~~

function GetTranslatedNumber(
    string number,
    string decimal_separator
    )
{
    if ( decimal_separator === ',' )
    {
        return str_replace( '.', ',', number );
    }
    else
    {
        return number;
    }
}

// ~~

function GetCurrentDate(
    )
{
    return date( 'Y-m-d' );
}

// ~~

function GetCurrentDateTime(
    )
{
    return date( 'Y-m-d H:i:s' );
}

// ~~

function GetCaptchaText(
    int character_count,
    string alphabet = 'ABCDEFGHJKLMNPQRSUVWXY23456789'
    )
{
    return substr( str_shuffle( alphabet ), 0, character_count );
}

// ~~

function GetCaptchaHash(
    string captcha,
    string alphabet = 'ABCDEFGHJKLMNPQRSUVWXY23456789'
    )
{
    var hash = 0;
    var character_count = strlen( captcha );

    for ( var character_index = 0;
          character_index < character_count;
          ++character_index )
    {
        hash = ( hash * 31 + strpos( alphabet, substr( captcha, character_index, 1 ) ) + 1 ) & 16777215;
    }

    return hash;
}

// ~~

function GetCaptchaCode(
    string captcha,
    string alphabet = 'ABCDEFGHJKLMNPQRSUVWXY23456789'
    )
{
    return
        "function IsValidCaptcha(\n"
        .. "    captcha\n"
        .. "    )\n"
        .. "{\n"
        .. "    var hash = 0;\n"
        .. "    \n"
        .. "    for ( character of captcha )\n"
        .. "    {\n"
        .. "        hash = ( hash * 31 + \"" .. alphabet .. "\".indexOf( character ) + 1 ) & 16777215;\n"
        .. "    }\n"
        .. "    \n"
        .. "    return hash === " .. GetCaptchaHash( captcha, alphabet ) .. ";\n"
        .. "}\n";
}

// ~~

function WriteCaptchaImage(
    string captcha,
    int slash_count = 15,
    int background_red_component = 255,
    int background_green_component = 255,
    int background_blue_component = 255,
    int slash_minimum_red_component = 128,
    int slash_minimum_green_component = 128,
    int slash_minimum_blue_component = 128,
    int slash_maximum_red_component = 255,
    int slash_maximum_green_component = 255,
    int slash_maximum_blue_component = 255,
    int text_minimum_red_component = 0,
    int text_minimum_green_component = 0,
    int text_minimum_blue_component = 0,
    int text_maximum_red_component = 92,
    int text_maximum_green_component = 92,
    int text_maximum_blue_component = 92
    )
{
    var character_count = strlen( captcha );
    var image_width = character_count * 20 + 10;
    var image_height = 40;
    var image = imagecreatetruecolor( image_width, image_height );

    imagefilledrectangle(
        image,
        0,
        0,
        image_width,
        image_height,
        imagecolorallocate(
            image,
            background_red_component,
            background_green_component,
            background_blue_component
            )
        );

    for ( var slash_index = 0;
          slash_index < slash_count;
          ++slash_index )
    {
        imageline(
            image,
            rand( 1, image_width - 25 ),
            rand( 1, image_height ),
            rand( 1, image_width + 25 ),
            rand( 1, image_height ),
            imagecolorallocate(
                image,
                rand( slash_minimum_red_component, slash_maximum_red_component ),
                rand( slash_minimum_green_component, slash_maximum_green_component ),
                rand( slash_minimum_blue_component, slash_maximum_blue_component )
                )
            );
    }

    for ( var character_index = 0;
          character_index < character_count;
          ++character_index )
    {
        imagechar(
            image,
            5,
            character_index * 20 + 10,
            rand( 5, 20 ),
            substr( captcha, character_index, 1 ),
            imagecolorallocate(
                image,
                rand( text_minimum_red_component, text_maximum_red_component ),
                rand( text_minimum_green_component, text_maximum_green_component ),
                rand( text_minimum_blue_component, text_maximum_blue_component )
                )
            );
    }

    header( 'Content-Type: image/png' );
    imagepng( image );
    imagedestroy( image );
}

// ~~

function IsValidCaptcha(
    string answer,
    string captcha,
    int maximum_error_count = 0
    )
{
    if ( answer === captcha )
    {
        return true;
    }
    else
    {
        var character_count = strlen( captcha );

        if ( strlen( answer ) === character_count )
        {
            var error_count = 0;

            for ( var character_index = 0;
                  character_index < character_count;
                  ++character_index )
            {
                if ( substr( answer, character_index, 1 )
                     !== substr( captcha, character_index, 1 ) )
                {
                    ++error_count;
                }
            }

            return error_count < maximum_error_count;
        }
        else
        {
            return false;
        }
    }
}

// -- STATEMENTS

ini_set( 'display_errors', 1 );
error_reporting( E_ALL );

session_start();
